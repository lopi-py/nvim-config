return {
  {
    "ellisonleao/gruvbox.nvim",
    opts = {
      italic = {
        strings = false,
        emphasis = false,
        comments = false,
        operators = false,
        folds = false,
      },
      overrides = {
        CursorLineNr = { bg = "none" },
        SignColumn = { link = "LineNr" },
        FoldColumn = { link = "LineNr" },
        FloatBorder = { fg = "#504945" },
        NormalFloat = { bg = "none" },
        LspReferenceText = { link = "Visual" },
        LspReferenceRead = { link = "Visual" },
        LspReferenceWrite = { link = "Visual" },
        TelescopeResultsTitle = { link = "GruvboxGray" },
        TelescopeResultsBorder = { fg = "#504945" },
        TelescopePromptTitle = { link = "GruvboxGray" },
        TelescopePromptBorder = { fg = "#504945" },
        TelescopePreviewTitle = { link = "GruvboxGray" },
        TelescopePreviewBorder = { fg = "#504945" },
        ["@module"] = { link = "GruvboxPurple" },
        ["@namespace"] = { link = "GruvboxPurple" },
        ["@punctuation.delimiter"] = { link = "@comment" },
        ["@punctuation.bracket"] = { link = "@comment" },
        ["@lsp.type.variable"] = {},
        ["@lsp.type.selfKeyword"] = { link = "@variable.builtin" },
        ["@lsp.typemod.class.defaultLibrary"] = { link = "@type.builtin" },
        ["@lsp.typemod.enum.defaultLibrary"] = { link = "@type.builtin" },
        ["@lsp.typemod.enumMember.defaultLibrary"] = { link = "@constant.builtin" },
        ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
        ["@lsp.typemod.keyword.async"] = { link = "@keyword.coroutine" },
        ["@lsp.typemod.macro.defaultLibrary"] = { link = "@function.builtin" },
        ["@lsp.typemod.method.defaultLibrary"] = { link = "@function.builtin" },
        ["@lsp.typemod.operator.injected"] = { link = "@operator" },
        ["@lsp.typemod.string.injected"] = { link = "@string" },
        ["@lsp.typemod.type.defaultLibrary"] = { link = "@type.builtin" },
        ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
        ["@lsp.typemod.variable.injected"] = { link = "@variable" },
      },
    },
  },
}
